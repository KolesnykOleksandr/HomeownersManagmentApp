@using Syncfusion.Blazor.Inputs
@using System.Globalization

<div class="slider-wrapper" style="max-width: @(ContainerWidth)px; width: @(ContainerWidth)px;">
    <div class="slider-container">
        <div class="slider-content">
            <SfSlider TValue="int" Min="0" Max="@(IntervalsCount - 1)" @bind-Value="@CurrentIntervalValue" Step="1">
                <SliderEvents TValue="int" TicksRendering="@OnTicksRendering" OnTooltipChange="@OnTooltipChange"></SliderEvents>
                <SliderTicks Placement="Placement.After" ShowSmallTicks="false" LargeStep="1"></SliderTicks>
                <SliderTooltip IsVisible="true" Placement="TooltipPlacement.Before"></SliderTooltip>
            </SfSlider>
        </div>
    </div>
    <div class="slider-info">
        <small>Інтервал @(CurrentIntervalValue + 1) з @IntervalsCount | Прокрутіть для перегляду всіх</small>
    </div>
</div>

<style>
    .slider-wrapper {
        border: 1px solid #ddd;
        border-radius: 6px;
        background: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .slider-container {
        overflow-x: auto;
        overflow-y: hidden;
        padding: 15px 0;
        background: #f9f9f9;
        scroll-behavior: smooth;
    }

    .slider-content {
        min-width: @(IntervalsCount * 180 + 100)px;
        width: max-content;
        padding: 0 50px;
    }

    .slider-info {
        padding: 8px 12px;
        background: #f0f0f0;
        border-top: 1px solid #e0e0e0;
        text-align: center;
        color: #666;
        font-size: 12px;
    }

    .slider-container::-webkit-scrollbar {
        height: 8px;
    }

    .slider-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
        margin: 0 10px;
    }

    .slider-container::-webkit-scrollbar-thumb {
        background: linear-gradient(90deg, #007bff, #0056b3);
        border-radius: 4px;
        border: 1px solid #fff;
    }

        .slider-container::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(90deg, #0056b3, #004085);
        }

    /* Стилі для слайдера */
    .e-slider-container .e-slider-track {
        background: #dee2e6;
        height: 4px;
    }

    .e-slider-container .e-range {
        background: linear-gradient(90deg, #007bff, #0056b3);
    }

    .e-slider-container .e-handle {
        border: 2px solid #007bff;
        background: #fff;
        box-shadow: 0 2px 4px rgba(0,123,255,0.3);
    }

        .e-slider-container .e-handle:hover {
            border-color: #0056b3;
            box-shadow: 0 3px 6px rgba(0,123,255,0.4);
        }
</style>

@code {
    [Parameter]
    public DateTime StartDateTime { get; set; } = DateTime.Today;
    [Parameter]
    public DateTime EndDateTime { get; set; } = DateTime.Today.AddDays(1);
    [Parameter]
    public TimeSpan IntervalSize { get; set; } = TimeSpan.FromHours(4);
    [Parameter]
    public DateTime CurrentDateTime { get; set; }
    [Parameter]
    public EventCallback<DateTime> CurrentDateTimeChanged { get; set; }
    [Parameter]
    public int ContainerWidth { get; set; } = 1200; // Ширина контейнера в пікселях

    private int IntervalsCount => (int)((EndDateTime - StartDateTime) / IntervalSize);

    private int CurrentIntervalValue
    {
        get => CalculateIntervalFromDateTime(CurrentDateTime);
        set
        {
            var newDateTime = StartDateTime.AddTicks(IntervalSize.Ticks * value);
            if (CurrentDateTime != newDateTime)
            {
                CurrentDateTime = newDateTime;
                CurrentDateTimeChanged.InvokeAsync(newDateTime);
            }
        }
    }

    private int CalculateIntervalFromDateTime(DateTime dateTime)
    {
        var ticksDifference = (dateTime - StartDateTime).Ticks;
        return (int)(ticksDifference / IntervalSize.Ticks);
    }

    private void OnTicksRendering(SliderTickEventArgs args)
    {
        var currentTime = StartDateTime.AddTicks(IntervalSize.Ticks * Convert.ToInt64(args.Value));
        var nextTime = currentTime.Add(IntervalSize);
        args.Text = $"{currentTime:dd.MM HH:mm} - {nextTime:dd.MM HH:mm}";
    }

    private void OnTooltipChange(SliderTooltipEventArgs<int> args)
    {
        var currentTime = StartDateTime.AddTicks(IntervalSize.Ticks * args.Value);
        var nextTime = currentTime.Add(IntervalSize);
        args.Text = $"{currentTime:dd.MM HH:mm} - {nextTime:dd.MM HH:mm}";
    }
}