@page "/HomeManagment"
@using HomeownersManagmentApp.Interfaces
@using HomeownersManagmentApp.Models
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Lists
@using System.Dynamic;

@rendermode InteractiveAuto

<h3>Home Management</h3>

<div style="display: flex; gap: 10px; f lex-wrap: wrap; margin-bottom: 10px">

    <SfDropDownList
        @ref = "viewDropDownList"
        Width="300px"
        @key = "selectedViewId"   
        TValue="Guid"
        TItem="View"
        Placeholder="Select a view"
        DataSource="@Views"
        @bind-Value="selectedViewId">
        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
            <DropDownListEvents TItem="View" TValue="Guid"></DropDownListEvents>
    </SfDropDownList>
    
    
    <button class="add-button" onclick="@AddButtonClick">
        Add
    </button>

    <button class="update-button" onclick="@UpdateButtonClick">
        Update
    </button>

    <button class="delete-button" onclick="@DeleteButtonClick">
        Delete
    </button>

    @if(isAddButtonClicked || isUpdateButtonClicked)
    {
        <SfDialog Width="400px" IsModal="true" ShowCloseIcon="true">
            <DialogTemplates>
                <Header> View </Header>
                <Content>
                    <div style="display: flex; flex-direction: column; gap: 15px; padding: 10px;">
                        <div style="display: flex; align-items: center;">
                            <label style="width: 100px;">Name:</label>
                            <SfTextBox Width="250px" @bind-value = "changingView.Name"></SfTextBox>
                        </div>

                        <div style="display: flex; align-items: center;">
                            <label style="width: 100px;">Settings:</label>
                            <div style="position: relative; display: inline-block;">
                                <img src="https://static-00.iconduck.com/assets.00/filter-icon-512x512-v9trade2.png"
                                     style="
                                     position: absolute;
                                     top: 7px;
                                     left: 50%;
                                     transform: translateX(-50%);
                                     width: 20px;
                                     height: 20px;
                                     pointer-events:none;
                                     z-index:1000;"
                                     alt="Filter" />

                                <SfMultiSelect CssClass="hide-selected"
                                               Width="25px"
                                               TValue="List<string>"
                                               TItem="string"
                                               PopupWidth="300px"
                                               @bind-Value="changingView.Settings"
                                               DataSource="@report.ColumnsString"
                                               ShowClearButton="false"
                                               Mode="VisualMode.CheckBox"
                                               EnableSelectionOrder="false">
                                </SfMultiSelect>
                            </div>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Save" IsPrimary="true" OnClick="@SaveButtonClick" />
                <DialogButton Content="Cancel" OnClick="@CancelButtonClick" />
            </DialogButtons>
        </SfDialog>
    }
    
</div>

@if (deleteConfirmation)
{
    <SfDialog Width="300px" IsModal="true">
        <DialogTemplates>
            <Header> Delete Confirmation</Header>
            <Content> Are you sure, you want to delete view @selectedView.Name? </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="@OnConfirmDelete" />
            <DialogButton Content="No" OnClick="@OnCancelDelete" />
        </DialogButtons>
    </SfDialog>
}

<div style="max-width:1000px; height: 480px">
    <SfGrid DataSource="@datasource"
            AllowSorting="true"
            AllowGrouping="true"
            AllowFiltering="true"
            Height="100%"
            RowHeight="40"
            GridLines="GridLine.Both">
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridGroupSettings Columns="@groupColumns.ToArray()"></GridGroupSettings>

<GridColumns>
    @foreach (var group in report.ColumnGroups)
    {
        <GridColumn HeaderText="@group.Name">
            <GridColumns>
                @foreach (var prop in group.Columns)
                {
                    <GridColumn Field="@prop.name"
                                IsPrimaryKey="@(prop.name=="Id")"
                                HeaderText="@prop.header"
                                Type="@GetColumnType(prop.type)"
                                Width="150"
                                Format="@prop.format"
                                Visible="@IsShown(prop.name)"
                                TextAlign="@GetTextAlign(prop.align)">
                    </GridColumn>
                }
            </GridColumns>
        </GridColumn>
    }
</GridColumns>
    </SfGrid>
</div>

<style>
    .e-delim-values
    {
        display: none !important;
    }

    .e-multi-select-wrapper {
        padding: 0 !important;
        min-width: 40px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
    }

    .button{

    }
    
    .add-button {
        background-color: green;
        color: white;
    }

    .update-button {
        background-color: darkorange;
        color: white;
    }

    .delete-button {
        background-color: Red;
        color: white;
    }

    .save-button {
        background-color: blue;
        color: white;
    }

    .text-box {
        margin-left: 5px;
        margin-bottom: 5px;
    }
</style>

@code   
{
    private List<string> groupColumns = new List<string>();
    private ReportSnapshot reportSnapshot;
    private List<ExpandoObject> datasource;
    private List<View> Views = null;

    private ReportModel report = null;
    private IViewService _viewService;
    private SfDropDownList<Guid,View> viewDropDownList;

    private bool isAddButtonClicked = false;
    private bool isUpdateButtonClicked = false;
    private bool deleteConfirmation = false;

    private View selectedView;
    private View changingView;

    private Guid _selectedViewId;
    private Guid selectedViewId
    {
        get => _selectedViewId;
        set
        {
            if (_selectedViewId != value)
            {
                _selectedViewId = value;
                OnViewChanged();
            }
        }
    }

    public HomeManagment(IViewService viewService)
    {
        _viewService = viewService;
    }

    protected override void OnInitialized()
    {
        Views = _viewService.GetViews(Guid.NewGuid()).Result;
        selectedViewId = Views[0].Id;
        selectedView = Views[0];

        report = new ReportModel()
            {
                ReportId = 1,
                ReportName = "Звіт по нерухомості",
                ColumnGroups = new List<ColumnGroup>
                    {
                        new ColumnGroup
                        {
                            Name = "Main information",
                            Columns = new List<Column>{
                        new Column
                        {
                            name = "Id",
                            header = "ID",
                            type = "number",
                            align = "right",
                            format = "",
                            isGroupBy = false
                        },
                        new Column
                        {
                            name = "Name",
                            header = "Назва об'єкта",
                            type = "string",
                            align = "left",
                            format = "",
                            isGroupBy = false
                        }
                            }
                        },
                        new ColumnGroup
                        {
                            Name = "Placement information",
                            Columns = new List<Column>
                            {

                            new Column
                        {
                            name = "Address",
                            header = "Адреса",
                            type = "string",
                            align = "left",
                            format = "",
                            isGroupBy = false
                        },
                        new Column
                        {
                            name = "City",
                            header = "Місто",
                            type = "string",
                            align = "left",
                            format = "",
                            isGroupBy = true
                        },
                        new Column
                        {
                            name = "Region",
                            header = "Область",
                            type = "string",
                            align = "left",
                            format = "",
                            isGroupBy = false
                        }
                            }
                        }

                    }
            };

        reportSnapshot =_viewService.GetSnapshot().Result;
        datasource = reportSnapshot.Report();

    }

    private void AddButtonClick()
    {
        isAddButtonClicked = true;
        changingView = new View();
        StateHasChanged();
    }

    private void UpdateButtonClick()
    {
        isUpdateButtonClicked = true;
        changingView = new View(selectedView);
        StateHasChanged();
    }

    private void DeleteButtonClick()
    {
        deleteConfirmation = true;
        StateHasChanged();
    }

    private void OnConfirmDelete()
    {
        deleteConfirmation = false;
        _viewService.DeleteView(selectedViewId);

        int currentIndex = Views.IndexOf(selectedView);
        Views.Remove(selectedView);

        Views = new List<View>(Views);

        if (Views.Count > 0)
        {
            selectedView = currentIndex > 0 ? Views[currentIndex - 1] : Views[0];
            selectedViewId = selectedView.Id;
        }
        else
        {
            selectedView = null;
            selectedViewId = Guid.Empty;
        }

        StateHasChanged();
    }

    private void OnCancelDelete()
    {
        deleteConfirmation = false;
        StateHasChanged();
    }

    private void SaveButtonClick()
    {
        if (isAddButtonClicked)
        {
            selectedView = changingView;
            _viewService.CreateView(selectedView);
            Views.Add(selectedView);
        }
        else if (isUpdateButtonClicked)
        {
            selectedView.Name = changingView.Name;
            selectedView.Settings = changingView.Settings;
            _viewService.UpdateView(selectedView);

            var index = Views.FindIndex(v => v.Id == selectedView.Id);
            if (index >= 0)
            {
                Views[index] = selectedView;
            }
        }

        Views = new List<View>(Views);
        selectedViewId = selectedView.Id;

        isAddButtonClicked = false;
        isUpdateButtonClicked = false;
        changingView = null;

        viewDropDownList.RefreshDataAsync();
        StateHasChanged();
    }


    private void CancelButtonClick()
    {
        isAddButtonClicked = false;
        isUpdateButtonClicked = false;
        changingView = null;

        StateHasChanged();
    }

    private bool IsShown(string name)
    {
        if (selectedView.Settings != null)
        {
            foreach (var item in selectedView.Settings)
            {
                if (item == name)
                {
                    return true;
                }
            }
        }
        return false;
    }

    private void OnViewChanged()
    {
        selectedView = Views.FirstOrDefault(v => v.Id == selectedViewId);
        //homes = new List<HomeModel>(homes);
        datasource = reportSnapshot.Report();
        StateHasChanged();
    }

    private ColumnType GetColumnType(string type)
    {
        return type switch
        {
            "number" => ColumnType.Number,
            "date" => ColumnType.DateTime,
            "boolean" => ColumnType.Boolean,
            _ => ColumnType.String
        };
    }
    
    private TextAlign GetTextAlign(string align)
    {
        return align switch
        {
            "right" => TextAlign.Right,
            "center" => TextAlign.Center,
            _ => TextAlign.Left
        };
    }
}